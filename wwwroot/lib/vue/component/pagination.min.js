(function (f) {
    var b = []; b.push('<div class="adv-pagination">'); b.push('    <a href="#" v-show="isShowFirst" v-on:click.prevent="goToFirst()">First</a>'); b.push('    <a class="disabled" href="#" v-show="isShowFirst" v-on:click.prevent="goToPage(0)">...</a>'); b.push('    <a href="#" :class="{ active: currentPageIndex === page }" v-for="page in pages" v-on:click.prevent="goToPage(page)">{{page}}</a>'); b.push('    <a class="disabled" href="#" v-show="isShowLast" v-on:click.prevent="goToPage(0)">...</a>');
    b.push('    <a href="#" v-show="isShowLast" v-on:click.prevent="goToLast()">Last</a>'); b.push("</div>"); f.component("adv-pagination", {
        template: b.join(""), data: function () { return { currentPageIndex: 1, currentPageSize: 10, currentTotalCount: 0, pageCount: 0, pages: [], windowWidth: window.innerWidth } }, props: { pageIndex: { type: Number, "default": 1 }, pageSize: { type: Number, "default": 10 }, totalCount: { type: Number, "default": 0 } }, computed: {
            halfVissiblePageCount: function () { return Math.floor(this.visiblePageCount / 2) }, isShowFirst: function () {
                return this.pageCount <=
                    this.visiblePageCount ? !1 : this.currentPageIndex > this.halfVissiblePageCount ? !0 : !1
            }, isShowLast: function () { return this.pageCount <= this.visiblePageCount ? !1 : this.currentPageIndex < this.pageCount - this.halfVissiblePageCount ? !0 : !1 }, visiblePageCount: function () { return 375 < this.windowWidth ? 5 : 3 }
        }, methods: {
            $_calculatePageCount: function () {
                this.pageCount = 0 < this.currentPageIndex && 0 < this.currentPageSize && 0 < this.currentTotalCount ? 0 < this.currentTotalCount % this.currentPageSize ? Math.floor(this.currentTotalCount / this.currentPageSize) +
                    1 : Math.floor(this.currentTotalCount / this.currentPageSize) : 0
            }, $_processPages: function () { if (0 !== this.pageCount) { this.pages = []; var a = this.currentPageIndex, c = this.pageCount, b = this.visiblePageCount, e = this.halfVissiblePageCount; if (c <= b) var d = 1; else a > e ? (d = a - e, c - a <= e && (d -= e - (c - a))) : d = 1, c - a <= e || (c = a + e, c - d + 1 < b && (c += d + b - 1 - c)); if (a < d || a > c) this.currentPageIndex = d; for (; d <= c; d++)this.pages.push(d) } }, goToFirst: function () {
                this.currentPageIndex = 1; this.$_processPages(); this.$emit("index-change", this.currentPageIndex);
                this.$root.$emit("adv-pagination-index-change", this.currentPageIndex)
            }, goToLast: function () { this.currentPageIndex = this.pageCount; this.$_processPages(); this.$emit("index-change", this.currentPageIndex); this.$root.$emit("adv-pagination-index-change", this.currentPageIndex) }, goToPage: function (a) { 1 > a || a > this.pageCount || (this.currentPageIndex = a, this.$_processPages(), this.$emit("index-change", this.currentPageIndex), this.$root.$emit("adv-pagination-index-change", this.currentPageIndex)) }
        }, watch: {
            pageIndex: {
                handler: function (a) {
                    a =
                    parseInt(a, 10); !isNaN(a) && -1 < a && (this.currentPageIndex = a, this.$_processPages())
                }, immediate: !0
            }, pageSize: { handler: function (a) { a = parseInt(a, 10); !isNaN(a) && -1 < a && (this.currentPageSize = a, this.$_calculatePageCount(), this.$_processPages()) }, immediate: !0 }, totalCount: { handler: function (a) { a = parseInt(a, 10); !isNaN(a) && -1 < a && (this.currentTotalCount = a, this.$_calculatePageCount(), this.$_processPages()) }, immediate: !0 }
        }, mounted: function () {
            var a = this; a.$_calculatePageCount(); a.$_processPages(); window.onresize = function () {
                a.windowWidth =
                window.innerWidth
            }
        }
    })
})(Vue);